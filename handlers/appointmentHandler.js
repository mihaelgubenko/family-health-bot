const { getServicesKeyboard, getDaysKeyboard, getTimeKeyboard, getConfirmKeyboard, getSpecialistInlineKeyboard } = require('../keyboards');
const AppointmentService = require('../services/appointmentService');
const config = require('../config.js');
const moment = require('moment');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
const appointmentStates = new Map();

class AppointmentHandler {
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
  static async showAppointmentMenu(bot, chatId, userId) {
    const message = `
üìÖ *–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º*

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º:

ü•ó *–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥* - ${config.services.nutritionist.price}‚ÇΩ (${config.services.nutritionist.duration} –º–∏–Ω)
${config.services.nutritionist.description}

ü¶¥ *–û—Å—Ç–µ–æ–ø–∞—Ç* - ${config.services.osteopath.price}‚ÇΩ (${config.services.osteopath.duration} –º–∏–Ω)
${config.services.osteopath.description}

üíÜ‚Äç‚ôÄÔ∏è *–ú–∞—Å—Å–∞–∂–∏—Å—Ç* - ${config.services.massage.price}‚ÇΩ (${config.services.massage.duration} –º–∏–Ω)
${config.services.massage.description}

üéØ *–ò–≥–ª–æ—Ä–µ—Ñ–ª–µ–∫—Å–æ—Ç–µ—Ä–∞–ø–∏—è* - ${config.services.acupuncture.price}‚ÇΩ (${config.services.acupuncture.duration} –º–∏–Ω)
${config.services.acupuncture.description}

‚ö° *–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏—è* - ${config.services.physiotherapy.price}‚ÇΩ (${config.services.physiotherapy.duration} –º–∏–Ω)
${config.services.physiotherapy.description}

üî¨ *–ë–∏–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ* - ${config.services.bioscan.price}‚ÇΩ (${config.services.bioscan.duration} –º–∏–Ω)
${config.services.bioscan.description}
    `;
    
    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: getSpecialistInlineKeyboard()
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
  static async handleSpecialistSelection(bot, chatId, userId, specialist) {
    const serviceConfig = config.services[specialist];
    
    if (!serviceConfig) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    appointmentStates.set(userId, {
      step: 'select_date',
      service: specialist,
      serviceName: serviceConfig.name,
      price: serviceConfig.price,
      duration: serviceConfig.duration
    });
    
    const message = `
‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: *${serviceConfig.name}*

üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${serviceConfig.description}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${serviceConfig.duration} –º–∏–Ω—É—Ç
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${serviceConfig.price} —Ä—É–±–ª–µ–π

üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:
    `;
    
    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: getDaysKeyboard()
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –¥–∞—Ç—ã
  static async handleDateSelection(bot, chatId, userId, selectedDate) {
    const userState = appointmentStates.get(userId);
    
    if (!userState || userState.step !== 'select_date') {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.');
      return;
    }
    
    // –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    const date = this.parseSelectedDate(selectedDate);
    
    if (!date || !AppointmentService.isWorkingDay(date)) {
      await bot.sendMessage(chatId, '‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—á–∏–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.');
      return;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    try {
      const availableSlots = await AppointmentService.getAvailableSlots(userState.service, date);
      
      if (availableSlots.length === 0) {
        await bot.sendMessage(chatId, 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.', {
          reply_markup: getDaysKeyboard()
        });
        return;
      }
      
      // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userState.step = 'select_time';
      userState.selectedDate = date;
      appointmentStates.set(userId, userState);
      
      const message = `
üìÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: *${moment(date).format('DD.MM.YYYY (dddd)')}*
üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${userState.serviceName}

üïê –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:
      `;
      
      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: this.createTimeKeyboard(availableSlots)
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', error);
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
  static async handleTimeSelection(bot, chatId, userId, selectedTime) {
    const userState = appointmentStates.get(userId);
    
    if (!userState || userState.step !== 'select_time') {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    try {
      const isAvailable = await AppointmentService.isTimeAvailable(userState.selectedDate, selectedTime);
      
      if (!isAvailable) {
        await bot.sendMessage(chatId, 'üòî –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.');
        return;
      }
      
      // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userState.step = 'enter_contact';
      userState.selectedTime = selectedTime;
      appointmentStates.set(userId, userState);
      
      const message = `
‚úÖ –í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ: *${selectedTime}*

üìã *–°–≤–æ–¥–∫–∞ –∑–∞–ø–∏—Å–∏:*
üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${userState.serviceName}
üìÖ –î–∞—Ç–∞: ${moment(userState.selectedDate).format('DD.MM.YYYY (dddd)')}
üïê –í—Ä–µ–º—è: ${selectedTime}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${userState.duration} –º–∏–Ω—É—Ç
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${userState.price} —Ä—É–±–ª–µ–π

üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:
(–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX)
      `;
      
      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown'
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  static async handleContactInput(bot, chatId, userId, text, userInfo) {
    const userState = appointmentStates.get(userId);
    
    if (!userState || userState.step !== 'enter_contact') {
      return false; // –ù–µ –Ω–∞—à–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^\+7\d{10}$/;
    if (!phoneRegex.test(text)) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX');
      return true;
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userState.step = 'enter_notes';
    userState.phone = text;
    userState.firstName = userInfo.first_name || '–ü–∞—Ü–∏–µ–Ω—Ç';
    userState.lastName = userInfo.last_name || '';
    appointmentStates.set(userId, userState);
    
    const message = `
üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${text}

üìù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—ã? 
(–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ë–æ–ª–∏ –≤ —Å–ø–∏–Ω–µ", "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ–º", "–ü–µ—Ä–≤–∏—á–Ω—ã–π –ø—Ä–∏–µ–º")

–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç.
    `;
    
    await bot.sendMessage(chatId, message);
    return true;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
  static async handleNotesInput(bot, chatId, userId, text) {
    const userState = appointmentStates.get(userId);
    
    if (!userState || userState.step !== 'enter_notes') {
      return false;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (text.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      userState.notes = text;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await this.showFinalConfirmation(bot, chatId, userId, userState);
    return true;
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  static async showFinalConfirmation(bot, chatId, userId, userState) {
    userState.step = 'confirm';
    appointmentStates.set(userId, userState);
    
    const message = `
üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏*

üë§ –ü–∞—Ü–∏–µ–Ω—Ç: ${userState.firstName} ${userState.lastName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${userState.phone}

üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${userState.serviceName}
üìÖ –î–∞—Ç–∞: ${moment(userState.selectedDate).format('DD.MM.YYYY (dddd)')}
üïê –í—Ä–µ–º—è: ${userState.selectedTime}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${userState.duration} –º–∏–Ω—É—Ç
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${userState.price} —Ä—É–±–ª–µ–π

${userState.notes ? `üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${userState.notes}` : ''}

üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ó–¥–æ—Ä–æ–≤—å—è, –¥. 123

–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ?
    `;
    
    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: getConfirmKeyboard()
    });
  }
  
  // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å
  static async confirmAppointment(bot, chatId, userId) {
    const userState = appointmentStates.get(userId);
    
    if (!userState || userState.step !== 'confirm') {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.');
      return;
    }
    
    try {
      // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const appointmentData = {
        userId: userId,
        firstName: userState.firstName,
        lastName: userState.lastName,
        phone: userState.phone,
        service: userState.service,
        serviceName: userState.serviceName,
        date: userState.selectedDate,
        time: userState.selectedTime,
        duration: userState.duration,
        price: userState.price,
        notes: userState.notes || '',
        status: 'confirmed',
        bookingMethod: 'telegram'
      };
      
      const appointment = await AppointmentService.createAppointment(appointmentData);
      
      // –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      appointmentStates.delete(userId);
      
      const confirmMessage = `
‚úÖ *–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*

üÜî –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: ${appointment._id.toString().slice(-6)}

üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:*
üë§ ${userState.firstName} ${userState.lastName}
üìû ${userState.phone}
üë®‚Äç‚öïÔ∏è ${userState.serviceName}
üìÖ ${moment(userState.selectedDate).format('DD.MM.YYYY (dddd)')}
üïê ${userState.selectedTime}
üí∞ ${userState.price} —Ä—É–±–ª–µ–π

üìç *–ê–¥—Ä–µ—Å –∫–ª–∏–Ω–∏–∫–∏:*
–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ó–¥–æ—Ä–æ–≤—å—è, –¥. 123
–º. –ó–¥–æ—Ä–æ–≤—å–µ (5 –º–∏–Ω –ø–µ—à–∫–æ–º)

‚è∞ *–í–∞–∂–Ω–æ:*
‚Ä¢ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ü—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å
‚Ä¢ –ó–∞ 24 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${config.notifications.adminPhone}
Email: ${config.notifications.emailSupport}

–ï—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω—è—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –∑–∞—Ä–∞–Ω–µ–µ.

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞! üôè
      `;
      
      await bot.sendMessage(chatId, confirmMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data: 'my_appointments' },
              { text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è', callback_data: 'contact_admin' }
            ],
            [
              { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
    }
  }
  
  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
  static async cancelAppointment(bot, chatId, userId) {
    appointmentStates.delete(userId);
    
    await bot.sendMessage(chatId, '‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞', callback_data: 'book_appointment' },
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      }
    });
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async showUserAppointments(bot, chatId, userId) {
    try {
      const appointments = await AppointmentService.getUserAppointments(userId);
      
      if (appointments.length === 0) {
        await bot.sendMessage(chatId, 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º.', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º', callback_data: 'book_appointment' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        });
        return;
      }
      
      const message = 'üìã *–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:*\n\n' + 
        appointments.slice(0, 10).map((apt, index) => {
          const date = moment(apt.date).format('DD.MM.YY');
          const status = AppointmentService.getStatusText(apt.status);
          return `${index + 1}. ${apt.serviceName}\nüìÖ ${date} –≤ ${apt.time} - ${status}`;
        }).join('\n\n');
      
      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å', callback_data: 'book_appointment' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  
  // –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
  static parseSelectedDate(dateString) {
    try {
      // –§–æ—Ä–º–∞—Ç: "–ü–Ω 25 –¥–µ–∫"
      const parts = dateString.split(' ');
      if (parts.length !== 3) return null;
      
      const day = parseInt(parts[1]);
      const monthName = parts[2];
      const year = new Date().getFullYear();
      
      const months = {
        '—è–Ω–≤': 0, '—Ñ–µ–≤': 1, '–º–∞—Ä': 2, '–∞–ø—Ä': 3, '–º–∞–π': 4, '–∏—é–Ω': 5,
        '–∏—é–ª': 6, '–∞–≤–≥': 7, '—Å–µ–Ω': 8, '–æ–∫—Ç': 9, '–Ω–æ—è': 10, '–¥–µ–∫': 11
      };
      
      const month = months[monthName];
      if (month === undefined) return null;
      
      const date = new Date(year, month, day);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      if (date < today) {
        date.setFullYear(year + 1);
      }
      
      return date;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã:', error);
      return null;
    }
  }
  
  // –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
  static createTimeKeyboard(availableSlots) {
    const keyboard = [];
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    for (let i = 0; i < availableSlots.length; i += 3) {
      const row = availableSlots.slice(i, i + 3);
      keyboard.push(row);
    }
    
    keyboard.push(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']);
    
    return {
      keyboard: keyboard,
      resize_keyboard: true,
      one_time_keyboard: false
    };
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static getUserState(userId) {
    return appointmentStates.get(userId);
  }
  
  // –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static clearUserState(userId) {
    appointmentStates.delete(userId);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø–∏—Å–∏
  static async handleMessage(bot, chatId, text, userId, userInfo) {
    const userState = appointmentStates.get(userId);
    
    if (!userState) {
      return false; // –ù–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏
    }
    
    switch (userState.step) {
      case 'enter_contact':
        return await this.handleContactInput(bot, chatId, userId, text, userInfo);
      
      case 'enter_notes':
        return await this.handleNotesInput(bot, chatId, userId, text);
      
      default:
        return false;
    }
  }
}

module.exports = AppointmentHandler;
