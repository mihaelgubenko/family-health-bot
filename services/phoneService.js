const axios = require('axios');
const config = require('../config.js');

class PhoneService {
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  constructor() {
    this.apiKey = config.api.phoneService;
    this.adminPhone = config.notifications.adminPhone;
    this.callHistory = new Map();
  }
  
  // –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
  static async requestPhoneConsultation(userId, userInfo) {
    try {
      const consultationRequest = {
        userId: userId,
        firstName: userInfo.firstName,
        phone: userInfo.phone,
        requestTime: new Date(),
        status: 'pending',
        type: 'consultation',
        priority: 'normal'
      };
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await this.notifyAdminAboutConsultation(consultationRequest);
      
      return {
        success: true,
        message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç',
        requestId: this.generateRequestId(),
        estimatedWaitTime: '15-30 –º–∏–Ω—É—Ç'
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: ${error.message}`);
    }
  }
  
  // –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
  static async notifyAdminAboutConsultation(request) {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º API —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
      // –ù–∞–ø—Ä–∏–º–µ—Ä, Twilio, Asterisk, –∏–ª–∏ –¥—Ä—É–≥—É—é —Å–∏—Å—Ç–µ–º—É
      
      console.log('–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:', {
        userId: request.userId,
        name: request.firstName,
        phone: request.phone,
        time: request.requestTime
      });
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–ø—Ä–∏–º–µ—Ä)
      const smsMessage = `
–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:
üë§ ${request.firstName}
üìû ${request.phone}
üïê ${request.requestTime.toLocaleString('ru-RU')}
üí¨ Telegram ID: ${request.userId}
      `;
      
      // await this.sendSMS(config.notifications.adminPhone, smsMessage);
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
      return false;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
  static async checkConsultationStatus(requestId) {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ API —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
      
      return {
        requestId: requestId,
        status: 'in_queue', // pending, in_queue, in_progress, completed, cancelled
        queuePosition: 2,
        estimatedWaitTime: '10-15 –º–∏–Ω—É—Ç',
        specialist: null
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
    }
  }
  
  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
  static async cancelConsultationRequest(requestId, userId) {
    try {
      // –õ–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
      
      console.log(`–û—Ç–º–µ–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ${requestId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      return {
        success: true,
        message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–º–µ–Ω–µ–Ω'
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
  }
  
  // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
  static async scheduleCallback(userId, userInfo, preferredTime) {
    try {
      const callback = {
        userId: userId,
        firstName: userInfo.firstName,
        phone: userInfo.phone,
        preferredTime: new Date(preferredTime),
        scheduledTime: new Date(),
        status: 'scheduled',
        type: 'callback',
        attempts: 0,
        maxAttempts: 3
      };
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
      await this.saveCallbackRequest(callback);
      
      return {
        success: true,
        message: '–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
        callbackId: this.generateRequestId(),
        scheduledTime: callback.preferredTime
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞: ${error.message}`);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
  static async saveCallbackRequest(callback) {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫:', callback);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
      return false;
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
  static getAvailableCallbackTimes() {
    const times = [];
    const now = new Date();
    const workStart = 9; // 9:00
    const workEnd = 18;  // 18:00
    
    // –°–µ–≥–æ–¥–Ω—è (–µ—Å–ª–∏ –µ—â–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)
    if (now.getHours() < workEnd) {
      const today = new Date();
      today.setMinutes(0, 0, 0);
      
      for (let hour = Math.max(now.getHours() + 1, workStart); hour < workEnd; hour++) {
        const time = new Date(today);
        time.setHours(hour);
        times.push({
          value: time.toISOString(),
          display: `–°–µ–≥–æ–¥–Ω—è –≤ ${hour}:00`
        });
      }
    }
    
    // –ó–∞–≤—Ç—Ä–∞
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setMinutes(0, 0, 0);
    
    for (let hour = workStart; hour < workEnd; hour++) {
      const time = new Date(tomorrow);
      time.setHours(hour);
      times.push({
        value: time.toISOString(),
        display: `–ó–∞–≤—Ç—Ä–∞ –≤ ${hour}:00`
      });
    }
    
    return times;
  }
  
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
  static async sendSMS(phone, message) {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
      console.log(`SMS –Ω–∞ ${phone}: ${message}`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
      return false;
    }
  }
  
  // –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
  static async initiateCall(fromNumber, toNumber, callbackUrl) {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º API (Twilio, etc.)
      console.log(`–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∑–≤–æ–Ω–æ–∫ —Å ${fromNumber} –Ω–∞ ${toNumber}`);
      
      return {
        callId: this.generateRequestId(),
        status: 'initiated',
        estimatedDuration: '5-15 –º–∏–Ω—É—Ç'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞:', error);
      throw error;
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
  static async getCallStatistics(startDate, endDate) {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã
      
      return {
        totalRequests: 45,
        completedCalls: 38,
        averageWaitTime: '12 –º–∏–Ω—É—Ç',
        averageCallDuration: '8 –º–∏–Ω—É—Ç',
        satisfactionRating: 4.6,
        peakHours: ['10:00-11:00', '14:00-15:00', '16:00-17:00']
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
    }
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
  static formatConsultationInfo(consultation) {
    return `
üìû *–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è*

üÜî ID –∑–∞–ø—Ä–æ—Å–∞: ${consultation.requestId}
üë§ –ü–∞—Ü–∏–µ–Ω—Ç: ${consultation.firstName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${consultation.phone}
üïê –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${consultation.requestTime}
üìä –°—Ç–∞—Ç—É—Å: ${this.getConsultationStatusText(consultation.status)}

${consultation.queuePosition ? `üìã –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${consultation.queuePosition}` : ''}
${consultation.estimatedWaitTime ? `‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${consultation.estimatedWaitTime}` : ''}
${consultation.specialist ? `üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${consultation.specialist}` : ''}
    `;
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
  static getConsultationStatusText(status) {
    const statuses = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      'in_queue': 'üïê –í –æ—á–µ—Ä–µ–¥–∏',
      'in_progress': 'üìû –ò–¥–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
      'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
      'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞',
      'missed': '‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞'
    };
    
    return statuses[status] || status;
  }
  
  // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ID –∑–∞–ø—Ä–æ—Å–∞
  static generateRequestId() {
    return 'REQ_' + Date.now().toString(36) + Math.random().toString(36).substr(2, 5);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
  static isWorkingHours() {
    const now = new Date();
    const hours = now.getHours();
    const workStart = parseInt(config.schedule.workHours.start.split(':')[0]);
    const workEnd = parseInt(config.schedule.workHours.end.split(':')[0]);
    const isWorkingDay = config.schedule.workDays.includes(now.getDay());
    
    return isWorkingDay && hours >= workStart && hours < workEnd;
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞
  static getNextAvailableTime() {
    const now = new Date();
    
    if (this.isWorkingHours()) {
      // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç —á–µ—Ä–µ–∑ —á–∞—Å
      const nextHour = new Date(now);
      nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
      return nextHour;
    } else {
      // –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –≤ 9:00
      const nextDay = new Date(now);
      nextDay.setDate(nextDay.getDate() + 1);
      nextDay.setHours(9, 0, 0, 0);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
      while (!config.schedule.workDays.includes(nextDay.getDay())) {
        nextDay.setDate(nextDay.getDate() + 1);
      }
      
      return nextDay;
    }
  }
}

module.exports = PhoneService;
