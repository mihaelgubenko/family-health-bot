const Appointment = require('../models/Appointment');
const moment = require('moment');

class AppointmentService {
  constructor() {
    this.db = new Appointment();
  }

  // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º
  async createAppointment(appointmentData) {
    try {
      const appointment = await this.db.createAppointment(appointmentData);
      console.log('‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', appointment);
      return appointment;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserAppointments(userId) {
    try {
      const appointments = await this.db.getUserAppointments(userId);
      return appointments;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
  async isTimeSlotAvailable(specialist, date, time) {
    try {
      const appointments = await this.db.getAppointmentsByDate(date);
      const conflictingAppointment = appointments.find(apt => 
        apt.specialist === specialist && apt.appointmentTime === time
      );
      return !conflictingAppointment;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
  async getAvailableTimeSlots(specialist, date) {
    try {
      const existingAppointments = await this.db.getAppointmentsByDate(date);
      const bookedTimes = existingAppointments
        .filter(apt => apt.specialist === specialist)
        .map(apt => apt.appointmentTime);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (09:00 - 18:00 —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 –º–∏–Ω—É—Ç)
      const timeSlots = [];
      for (let hour = 9; hour < 18; hour++) {
        for (let minute = 0; minute < 60; minute += 30) {
          const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
          if (!bookedTimes.includes(time)) {
            timeSlots.push(time);
          }
        }
      }

      return timeSlots;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', error);
      return [];
    }
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
  async cancelAppointment(appointmentId, userId) {
    try {
      const result = await this.db.cancelAppointment(appointmentId, userId);
      if (result) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞:', appointmentId);
        return true;
      } else {
        console.log('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞:', appointmentId);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:', error);
      throw error;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async saveUserInfo(userInfo) {
    try {
      const user = await this.db.saveUser(userInfo);
      return user;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö
  async sendReminders(bot) {
    try {
      const appointments = await this.db.getAppointmentsForReminder();
      
      for (const appointment of appointments) {
        const message = `
üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏*

–ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å:
üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${appointment.specialist}
üìÖ –î–∞—Ç–∞: ${moment(appointment.appointmentDate).format('DD.MM.YYYY')}
üïê –í—Ä–µ–º—è: ${appointment.appointmentTime}

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!
        `;

        try {
          await bot.sendMessage(appointment.userId, message, {
            parse_mode: 'Markdown'
          });
          console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${appointment.userId}`);
        } catch (sendError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${appointment.userId}:`, sendError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–µ–π
  async getAppointmentStats() {
    try {
      // –ü–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –ø—Ä–æ—Å—Ç–∞—è SQLite —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const today = moment().format('YYYY-MM-DD');
      const appointments = await this.db.getAppointmentsByDate(today);
      
      return {
        today: appointments.length,
        total: 'N/A', // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        specialists: [...new Set(appointments.map(apt => apt.specialist))].length
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return { today: 0, total: 0, specialists: 0 };
    }
  }

  // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  close() {
    this.db.close();
  }
}

module.exports = new AppointmentService();
